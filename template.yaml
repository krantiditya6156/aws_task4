AWSTemplateFormatVersion: '2010-09-09'
Transform: 'AWS::Serverless-2016-10-31'

Parameters:
  DBUsername:
    Type: String

Resources:
  RDSDatabase:
    Type: AWS::RDS::DBInstance
    Properties:
      DBName: database01
      AllocatedStorage: 10
      DBInstanceClass: db.t3.micro
      Engine: mysql
      MasterUsername: !Sub '{{resolve:secretsmanager:${SecretManager}:SecretString:username}}'
      MasterUserPassword: !Sub '{{resolve:secretsmanager:${SecretManager}:SecretString:password}}'

  SecretManager:
    Type: AWS::SecretsManager::Secret
    Properties:
      Name: dbcredentials
      GenerateSecretString:
        SecretStringTemplate: !Sub '{"username": "${DBUsername}"}'
        GenerateStringKey: "password"
        PasswordLength: 16
        ExcludeCharacters: '"@/\'

  LambdaLayer:
    Type: AWS::Serverless::LayerVersion
    Properties:
      LayerName: mysql-layer
      Description: Lambda Layer for mysql dependencies
      ContentUri: s3://code-bucket-sam-ap-south-1-123456/mysql-layer.zip 
      CompatibleRuntimes:
        - python3.10
        - python3.11
        - python3.12

  LambdaFunction:
    Type: 'AWS::Serverless::Function'
    Properties:
      Handler: app.lambda_handler
      Runtime: python3.12
      CodeUri: src/
      Description: A starter AWS Lambda function.
      MemorySize: 128
      Timeout: 3  
      Layers: 
        - !Ref LambdaLayer

      Policies:
        - AWSSecretsManagerGetSecretValuePolicy:
            SecretArn: !Ref SecretManager

      Environment:
        Variables:
          REGION_NAME: !Ref AWS::Region
          DBNAME: !GetAtt RDSDatabase.DBName
          ENDPOINT: !GetAtt RDSDatabase.Endpoint.Address
          SECRET_NAME: !GetAtt SecretManager.Id

      Events:
        SAMAPI:
          Type: Api
          Properties:
            Path: /details
            Method: GET
            RestApiId: !Ref API
            Auth:
              Authorizer: LambdaTokenAuthorizer

  API:
    Type: AWS::Serverless::Api
    Properties:
      StageName: Prod
      Cors:
        AllowOrigin: "'http://static-website-hosting-bucket-ap-south-1-394504785337.s3-website.ap-south-1.amazonaws.com'"                                            
        AllowHeaders: "'Content-Type,Authorization,auth-token,customer_id'"
        AllowMethods: "'GET,OPTIONS'"
      Auth:
        Authorizers: 
          LambdaTokenAuthorizer:
            FunctionArn: !GetAtt LambdaAuthorizer.Arn
            Identity:
              Header: auth-token
    
  LambdaAuthorizer:
    Type: 'AWS::Serverless::Function'
    Properties:
      Handler: authorizer.lambda_handler
      Runtime: python3.12
      CodeUri: src/
      Description: lambda function for authorization
      MemorySize: 128
      Timeout: 3

  StaticWebsiteHostingBucket:
    Type: 'AWS::S3::Bucket'
    Properties:
      BucketName: !Sub static-website-hosting-bucket-${AWS::Region}-${AWS::AccountId}
      WebsiteConfiguration:
        IndexDocument: index.html
      OwnershipControls:
        Rules:
          - ObjectOwnership: ObjectWriter
      PublicAccessBlockConfiguration:
        BlockPublicAcls: false
        BlockPublicPolicy: false
        IgnorePublicAcls: false
        RestrictPublicBuckets: false

  StaticWebsiteHostingBucketPolicy:
    Type: 'AWS::S3::BucketPolicy'
    Properties:
      Bucket: !Ref StaticWebsiteHostingBucket
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Sid: PublicReadForGetBucketObjects
            Effect: Allow
            Principal: '*'
            Action: 's3:GetObject'
            Resource: !Join 
              - ''
              - - 'arn:aws:s3:::'
                - !Ref StaticWebsiteHostingBucket
                - /* 

Outputs:
  SecretARN:
    Value: !Ref SecretManager

  outputWebsiteURL:
    Value: !GetAtt 
      - StaticWebsiteHostingBucket
      - WebsiteURL




